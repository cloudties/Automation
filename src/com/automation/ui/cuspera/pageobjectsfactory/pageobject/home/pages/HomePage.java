package com.automation.ui.cuspera.pageobjectsfactory.pageobject.home.pages;/** * @author */import com.automation.ui.base.common.core.element.dropdown.DropDownHelper;import com.automation.ui.cuspera.pageobjectsfactory.pageobject.base.CusperaBasePageObject;import com.automation.ui.cuspera.pageobjectsfactory.pageobject.home.vo.InitialSearchVO;import com.automation.ui.cuspera.pageobjectsfactory.pageobject.home.xpathconstants.HomeConstants;import org.apache.log4j.Logger;import org.openqa.selenium.WebElement;import org.openqa.selenium.support.FindBy;import org.testng.Reporter;import com.automation.ui.base.common.core.assertion.Assertion;import com.automation.ui.base.common.prpreaders.AssertDataReader;public class HomePage extends CusperaBasePageObject {    private static Logger logger = Logger.getLogger(HomePage.class);    @FindBy(xpath = HomeConstants.SEARCHINDUSTRY)    private WebElement searchIndustry;    @FindBy(xpath = HomeConstants.SEARCHMARKETNEED)    private WebElement searchMarketNeed;    @FindBy(xpath = HomeConstants.SEARCHBUSINESSGOAL)    private WebElement searchBusiGoal;    @FindBy(xpath = HomeConstants.SEARCHLEADMANAGEMENT)    private WebElement searchPick;    @FindBy(xpath = HomeConstants.CLIKCCARD)    private WebElement cardSelect;    public HomePage open() {        logger.debug("open the URL" + getCurrentUrl());        getUrl(getCurrentUrl());        return this;    }    public void searchIndustry(InitialSearchVO search) {        try {            DropDownHelper dh=new DropDownHelper(  driver, this);            dh.selectDropDown(searchIndustry, search.getSelectIndustry().getIndustry());        } catch (Exception e) {            Assertion.fail(AssertDataReader.assertreader.getValue("CUSPERAASSERTMSG_ASSERT_ERROR"));             e.printStackTrace();        }    }    public void searchMarketing(InitialSearchVO search) {        try {            fillInputAfterClear(searchMarketNeed,"lead");            DropDownHelper dh=new DropDownHelper(  driver, this);            dh.selectDropDown(searchPick, "lead management");        } catch (Exception e) {            Assertion.fail(AssertDataReader.assertreader.getValue("CUSPERAASSERTMSG_ASSERT_ERROR"));            e.printStackTrace();        }    }    public void searchGoal(InitialSearchVO search) {        try {            DropDownHelper dh=new DropDownHelper(  driver, this);            dh.selectDropDown(searchIndustry, search.getSelectBusinessGoal().getGoal());            waitAndClick(searchBusiGoal);        } catch (Exception e) {            Assertion.fail(AssertDataReader.assertreader.getValue("CUSPERAASSERTMSG_ASSERT_ERROR"));            e.printStackTrace();        }    }    public void search(InitialSearchVO search) {        try {            DropDownHelper dh=new DropDownHelper(  driver, this);            dh.selectDropDown(searchIndustry, search.getSelectIndustry().getIndustry());            fillInputAfterClear(searchMarketNeed,"lead");            dh=new DropDownHelper(  driver, this);            dh.selectDropDown(searchPick, "lead management");            Thread.sleep(2000);            dh=new DropDownHelper(  driver, this);            dh.selectDropDown(searchBusiGoal, search.getSelectBusinessGoal().getGoal());            Thread.sleep(3000);            logger.info("cliing card");            cardSelect.click();            logger.info("clciked card");            Thread.sleep(5000);        } catch (Exception e) {            Assertion.fail(AssertDataReader.assertreader.getValue("CUSPERAASSERTMSG_ASSERT_ERROR"));            e.printStackTrace();        }    }}