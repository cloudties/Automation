package com.automation.ui.ipe.pageobjectsfactory.pageobject.tpc.pages;/** * @author Manjusha Saju */import com.automation.ui.ipe.pageobjectsfactory.pageobject.base.IPEBasePageObject;import com.automation.ui.ipe.pageobjectsfactory.pageobject.tpc.xpathconstants.TPCCommonDetailsCONSTANTS;import com.automation.ui.ipe.pageobjectsfactory.pageobject.tpc.xpathconstants.TPCConstants;import org.apache.log4j.Logger;import org.openqa.selenium.WebElement;import org.openqa.selenium.support.FindBy;import org.testng.Reporter;import java.awt.*;import java.awt.datatransfer.StringSelection;import java.awt.event.KeyEvent;import java.io.File;import com.automation.ui.base.common.core.assertion.Assertion;import com.automation.ui.base.common.prpreaders.AssertDataReader;public class TPCPage extends IPEBasePageObject {    private static Logger logger = Logger.getLogger(TPCPage.class);    @FindBy(xpath = TPCConstants.SEARCHFORFILEINPUT)    private WebElement searchTPCInput;    @FindBy(xpath = TPCCommonDetailsCONSTANTS.TPCINFO)    private WebElement detailTPCInfo;    @FindBy(xpath = TPCConstants.UPLOADIMAGE)    private WebElement detailTPCUploadImage;    @FindBy(xpath = TPCConstants.UPLOADTEXT)    private WebElement detailTPCUploadText;    @FindBy(xpath = TPCConstants.CHECK_ITEM1)    private WebElement selectCheckTPCFile1;    @FindBy(xpath = TPCConstants.TPCGENERATEDRAWING_BTN)    private WebElement generateDrawing;    @FindBy(xpath = TPCConstants.TPCDOWNLOAD_BTN)    private WebElement downloadTPCFile;    @FindBy(xpath = TPCConstants.TPCDELETE_BTN)    private WebElement deleteTPCFile;    @FindBy(xpath = TPCConstants.TPCDELETE_ICON)    private WebElement deleteIcon;    public TPCPage open() {        logger.debug("open the URL" + getCurrentUrl());        getUrl(getCurrentUrl());        return this;    }    public void clickTPCInfo() {        try {            logger.debug("View questions in the section- TPC Information");            waitAndClick(detailTPCInfo);            logger.debug("Displayed questions in the section-TPC Information ");        } catch (Exception e) {            Assertion.fail(AssertDataReader.assertreader.getValue("IPEASSERTMSG_ASSERT_ERROR"));            Reporter.log("clickTPCInfo");            e.printStackTrace();        }    }    public void tpcSearch(String search) {        try {            logger.debug("Navigating tpcSearch");            clickTPCInfo();            fillInputAfterClear(searchTPCInput, search);            logger.debug("tpcSearch");        } catch (Exception e) {            e.printStackTrace();        }    }    public void tpcUpload() {        tpcProjectUpload(System.getProperty("user.dir") + File.separator + "resources\\TPC\\SM-SCDual.prj", detailTPCUploadImage);    }    private void tpcProjectUpload(String filepath, WebElement detailTPCUploadImage) {        try {            logger.debug("Browse to Digital Sign upload");            clickTPCInfo();            detailTPCUploadImage.click();            StringSelection filePathSelection = new StringSelection(filepath);            Toolkit.getDefaultToolkit().getSystemClipboard().setContents(filePathSelection, null);            //native key strokes for CTRL, V and ENTER keys            Robot robot = new Robot();            Thread.sleep(2000);            robot.keyPress(KeyEvent.VK_CONTROL);            robot.keyPress(KeyEvent.VK_V);            robot.keyRelease(KeyEvent.VK_V);            robot.keyPress(KeyEvent.VK_TAB);            robot.keyPress(KeyEvent.VK_ENTER);            logger.debug("Uploaded  file ");        } catch (Exception e) {            Assertion.fail(AssertDataReader.assertreader.getValue("IPEASSERTMSG_ASSERT_ERROR"));            Reporter.log(" upload is done");            e.printStackTrace();        }    }    public void tpcheckTPCItems() {        try {            logger.debug("Select an Item");            selectCheckTPCFile1.click();            logger.debug("Selected an Item");        } catch (Exception e) {            Assertion.fail(AssertDataReader.assertreader.getValue("IPEASSERTMSG_ASSERT_ERROR"));            Reporter.log("tpcheckTPCItems");            e.printStackTrace();        }    }    public void tpcGenerate() {        try {            logger.debug("Generate ");            tpcSearch("SC");            tpcheckTPCItems();            generateDrawing.click();            logger.debug("Generated");        } catch (Exception e) {            Assertion.fail(AssertDataReader.assertreader.getValue("IPEASSERTMSG_ASSERT_ERROR"));            Reporter.log("Generate");            e.printStackTrace();        }    }    public void tpcDeleteIcon() {        deleteIcon.click();    }    public void tpcDeleteTpcFile() {        deleteTPCFile.click();    }    public void tpcDownload() {        downloadTPCFile.click();    }}