package com.automation.ui.ipe.pageobjectsfactory.pageobject.fds.pages;/** * @author Manjusha Saju */import com.automation.ui.ipe.pageobjectsfactory.pageobject.base.IPEBasePageObject;import com.automation.ui.ipe.pageobjectsfactory.pageobject.fds.xpathconstants.FDSCommonDetailsCONSTANTS;import com.automation.ui.ipe.pageobjectsfactory.pageobject.fds.xpathconstants.FDSConstants;import org.apache.log4j.Logger;import org.openqa.selenium.WebElement;import org.openqa.selenium.support.FindBy;import org.testng.Reporter;import com.automation.ui.base.common.core.assertion.Assertion;import com.automation.ui.base.common.prpreaders.AssertDataReader;public class FDSPage extends IPEBasePageObject {    private static Logger logger = Logger.getLogger(FDSPage.class);    @FindBy(xpath = FDSConstants.SEARCHFORFILEINPUT)    private WebElement searchFDSInput;    @FindBy(xpath = FDSCommonDetailsCONSTANTS.FDSINFO)    private WebElement detailFDSInfo;    @FindBy(xpath = FDSConstants.GENERATE)    private WebElement fdsGenerate;    public FDSPage open() {        logger.debug("open the URL" + getCurrentUrl());        getUrl(getCurrentUrl());        return this;    }    public void clickFDSInfo() {        try {            logger.debug("View questions in the section- FDS Information");            waitAndClick(detailFDSInfo);            logger.debug("Displayed questions in the section-FDS Information ");        } catch (Exception e) {            Assertion.fail(AssertDataReader.assertreader.getValue("IPEASSERTMSG_ASSERT_ERROR"));            Reporter.log("clickTPCInfo");            e.printStackTrace();        }    }    public void fdsSearch(String search) {        try {            logger.debug("Navigating tpcSearch");            clickFDSInfo();            fillInputAfterClear(searchFDSInput, search);            logger.debug("fdsSearch");        } catch (Exception e) {            e.printStackTrace();        }    }    public void fdsGenerate() {        try {            logger.debug("Click fdsGenerate");            clickFDSInfo();            fdsGenerate.click();            Thread.sleep(5000);            logger.debug("fdsGenerate  file ");        } catch (Exception e) {            Assertion.fail(AssertDataReader.assertreader.getValue("IPEASSERTMSG_ASSERT_ERROR"));            Reporter.log(" generate is done");            e.printStackTrace();        }    }}